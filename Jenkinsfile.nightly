#!/bin/env groovy
@Library(['cliqz-shared-library@v1.2', 'browser-android@automation']) _
def matrix = [
//     'Cliqz ARM':[
//         'arch': 'arm',
//         'brand': 'cliqz',
//         'channel': 'MA02',
//         'target': 'arm-linux-androideabi',
//     ],
//     'Cliqz X86':[
//         'arch': 'x86',
//         'brand': 'cliqz',
//         'channel': 'MA02',
//         'target': 'i686-linux-android',
//     ],
    'Ghostery ARM':[
        'arch': 'arm',
        'brand': 'ghostery',
        'channel': 'MA52',
        'target': 'arm-linux-androideabi',
    ],
    'Ghostery X86':[
        'arch': 'x86',
        'brand': 'ghostery',
        'channel': 'MA52',
        'target': 'i686-linux-android',
    ],
//     'Cliqz Alpha':[
//         'arch': 'arm',
//         'brand': 'cliqz-alpha',
//         'channel': 'MA02',
//         'target': 'arm-linux-androideabi',
//     ],
    'Ghostery Alpha':[
        'arch': 'arm',
        'brand': 'ghostery-alpha',
        'channel': 'MA52',
        'target': 'arm-linux-androideabi',
    ],
]
def baseImage
def codeImage
def id
node ('kria'){
    def dockerTag = ""
    stage('Checkout') {
        checkout scm
        dockerTag = readFile('mozilla-release/browser/config/version.txt').trim()
    }
    id = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    baseImageName ="browser-f/android:${dockerTag}"
    codeImageName ="browser-f/android:nightlycode"
    baseImage = stage('Build base image') {
        docker.build(baseImageName, '--build-arg USER=`whoami` --build-arg UID=`id -u` --build-arg GID=`id -g` -f Dockerfile .')
    }
    stage('Build code image') {
        writeFile file: 'Dockerfile.code', text: """
            FROM ${baseImageName}
            COPY --chown=jenkins:jenkins . /app/
        """

        codeImage = docker.build(
            codeImageName,
            '-f Dockerfile.code .',
        )
    }
}

def build(Map m){
    def flavorname = m.name
    def buildarch = m.arch
    def brandname = m.brand
    def cliqzchannel = m.channel
    def androidtarget = m.target
    def getImageName = m.getImageName
    def nodeLabel = 'kria'
    def getId = m.getId
    def apk = ""
    return {
        node(nodeLabel) {
            getImageName().inside() {
                try{
                    stage('Build Cliqz React Native') {
                        cliqz.buildCliqzReactNative("/app/cliqz")
                    }
                    stage("Build APK: ${flavorname}") {
                        withCredentials([
                            file(credentialsId: 'd746a1dd-e075-4844-869a-32116a496352', variable: 'CERT_PATH' ),
                            string(credentialsId: 'b7422020-fe1b-4c57-9230-f3d52afee3cf', variable: 'CERT_PASS')
                        ]) {
                            apk = cliqz.buildBrowser("${androidtarget}", "${brandname}", "nightly", "/app")
                        }
                    }
                    stage("Upload: ${flavorname}") {
                        withCredentials([
                            [
                                $class: 'UsernamePasswordMultiBinding',
                                credentialsId: 'f1732e5f-3e84-47ad-9286-a5fa6657ec43',
                                passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                                usernameVariable: 'AWS_ACCESS_KEY_ID',
                            ]
                        ]) {
                            archiveArtifacts allowEmptyArchive: true, artifacts: "/app/build/${apk}"
                            utils.s3Copy(
                                "/app/build/${apk}",
                                "s3://repository.cliqz.com/dist/android/nightly/${brandname}",
                                "${brandname}_${env.BUILD_NUMBER}_${getId()}",
                                "${buildarch}",
                                true
                            )
                        }
                    }
                } catch(e) {
                    print e
                    raise e
                } finally {
                    stage('Clean Up') {
                       utils.cleanUp()
                    }
                }
            }
        }
    }
}

def stepsForParallelBuilds = helpers.entries(matrix).collectEntries{
    [("Building ${it[0]}"):build(
            name: it[0],
            arch: it[1]['arch'],
            brand: it[1]['brand'],
            channel: it[1]['channel'],
            target: it[1]['target'],
            getImageName: {codeImage},
            getId: {id}
    )]
}

stage('Build Applications'){
    parallel stepsForParallelBuilds
}

def transitionIssueList
def passedBuilds
stage('JIRA'){
    withEnv(['JIRA_SITE=cliqztix']){
        def returnList = jira.transitionIssues()
        passedBuilds = returnList[0]
        transitionIssueList = returnList[1]
    }
}

stage('Send email') {
    def projectName  = '$PROJECT_NAME'
    def changesSinceLastSuccess = jira.getChangeString(passedBuilds)
    def bodytxt = """
        ${projectName} - Build # ${env.BUILD_NUMBER}
        Check console output at ${env.JOB_URL}${env.BUILD_NUMBER}/ to view the results.
        Ghostery apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery/ghostery_Nightly-${env.BUILD_NUMBER}_${id}.apk
        Ghostery X86 apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery/ghostery_Nightly-${env.BUILD_NUMBER}_${id}_x86.apk
        Ghostery-Alpha apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery-alpha/ghostery-alpha_Nightly-${env.BUILD_NUMBER}_${id}.apk
        ${changesSinceLastSuccess}
        Issues Transtioned ${transitionIssueList}""".stripIndent()
    emailext(
        to: 'androiddev@cliqz.com',
        subject: '$PROJECT_NAME - Build # $BUILD_NUMBER',
        body: bodytxt
    )
}
