#!/bin/env groovy
@Library('cliqz-shared-library@v1.2') _
def matrix = [
        'cliqz':[
                'config':'mozconfigs/cliqz.mozconfig',
        ],
        'ghostery':[
                'config':'mozconfigs/ghostery.mozconfig',
        ],
        'cliqz-alpha':[
                'config':'mozconfigs/cliqz-alpha.mozconfig',
        ],
        'ghostery-alpha':[
                'config':'mozconfigs/ghostery-alpha.mozconfig',
        ],
]
def baseImage
def codeImage
node ('master'){
    def dockerTag = "" 
    stage('Checkout') {
        git branch: 'master',
            credentialsId: 'cliqz-m-oss',
            url: 'https://github.com/cliqz-oss/cliqz-android.git'
        dockerTag = readFile('mozilla-release/browser/config/version_display.txt').trim()
    }
    baseImageName ="browser-f/android:${dockerTag}"
    codeImageName ="browser-f/android:code"
    baseImage = stage('Build base image') {
        docker.build(baseImageName, '--build-arg UID=`id -u` --build-arg GID=`id -g` -f Dockerfile .')
    }
    stage('Build code image') {
        writeFile file: 'Dockerfile.code', text: """
            FROM ${baseImageName}
            COPY --chown=jenkins:jenkins . /app/
        """

        codeImage = docker.build(
            codeImageName,
            '-f Dockerfile.code .',
        )
    }
}

def build(Map m){
    def flavor = m.config
    def flavorname = m.name
    def getImageName = m.getImageName
    def nodeLabel = 'master'
    return {
        node(nodeLabel){
            getImageName().inside('-w /app') {
                stage('Download cache') {
                        withCredentials([
                            [
                                $class: 'UsernamePasswordMultiBinding',
                                credentialsId: 'f1732e5f-3e84-47ad-9286-a5fa6657ec43',
                                passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                                usernameVariable: 'AWS_ACCESS_KEY_ID',
                            ]
                        ]) {
                            def s3Path = "s3://repository.cliqz.com/dist/android/cache"
                            def cachePath = ".gradle/caches"
                            sh """#!/bin/bash -l 
                                pip install awscli --upgrade --user
                                cd
                                aws s3 sync --acl public-read --acl bucket-owner-full-control ${s3Path} ${cachePath}
                            """                        
                        }
                    }
                stage('Build APKS') {
                    sh """#!/bin/bash -l
                        set -e
                        set -x
                        pwd
                        ls
                        cp ${flavor} mozilla-release/mozconfig
                        cd mozilla-release
                        ./mach clobber
                        ./mach build
                        ./mach package
                    """
                    apk = sh(returnStdout: true,
                        script: """cd mozilla-release/objdir-frontend-android/${flavorname}/dist && \
                        find *.apk -name 'fennec*' -not -name '*-unsigned-*'""").trim()
                }
                stage('Upload') {
                    withCredentials([
                        [
                            $class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'f1732e5f-3e84-47ad-9286-a5fa6657ec43',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                        ]
                    ]) {
                        def s3Path = "s3://repository.cliqz.com/dist/android/nightly/${flavorname}"
                        def apkPath = "mozilla-release/objdir-frontend-android/${flavorname}/dist/${apk}"
                        sh """#!/bin/bash -l 
                            pip install awscli --upgrade --user
                            aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkPath} ${s3Path}/${flavorname}.apk
                            aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkPath} ${s3Path}/latest.apk
                        """
                    }
                }
            }

//            stage('Clean Up') {
//                sh '''#!/bin/bash
//                    rm -f mozilla-release/mozconfig
//                    rm -rf mozilla-release/objdir-frontend-android
//                    rm -rf autobots
//                '''
//            }
        }
    }
}

def stepsForParallelBuilds = helpers.entries(matrix).collectEntries{
    [("Building ${it[0]}"):build(
            name: it[0],
            config:it[1]['config'],
            getImageName: {codeImage}
    )]
}

stage('Build Applications'){
    parallel stepsForParallelBuilds
}

def transitionIssueList
stage('JIRA'){
    withEnv(['JIRA_SITE=cliqztix']){
        passedBuilds = []
        lastSuccessfulBuild(passedBuilds, currentBuild);
        def list1 = getIssueList()
        def transitionInput = [
                transition: [
                        id: '121'
                ]
        ]
        for (element in list1){
            try{
                def issue = jiraGetIssue idOrKey: element
                if(issue.data.fields.status.name == "Resolved"){
                    jiraTransitionIssue idOrKey: element, input: transitionInput
                    echo "Transistioned ${element}"
                }
            }
            catch (Error e){
                echo e
            }
        }
        transitionIssueList = list1.join(", ")
        echo transitionIssueList
    }
}

stage('Send email') {
    def bodytxt = '$PROJECT_NAME - Build # $BUILD_NUMBER'
    bodytxt += '\n\nCheck console output at http://magrathea:8080/job/' + env.JOB_NAME + '/' + env.BUILD_NUMBER + '/ to view the results.'
    bodytxt += '\n\nCliqz apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/cliqz/cliqz.apk'
    bodytxt += '\n\nCliqz-Alpha apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/cliqz-alpha/cliqz-alpha.apk'
    bodytxt += '\n\nGhostery apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery/ghostery.apk'
    bodytxt += '\n\nGhostery-Alpha apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery-alpha/ghostery-alpha.apk'
    bodytxt += '\n\n\n$CHANGES_SINCE_LAST_SUCCESS'
    bodytxt += '\n\nIssues Transtioned '+transitionIssueList
    emailext(
            to: 'joseph@cliqz.com',
            subject: '$PROJECT_NAME - Build # $BUILD_NUMBER',
            body: bodytxt
    )
}


def lastSuccessfulBuild(passedBuilds, build) {
    if ((build != null) && (build.result != 'SUCCESS')) {
        passedBuilds.add(build)
        lastSuccessfulBuild(passedBuilds, build.getPreviousBuild())
    }
}

@NonCPS
def getChangeString(passedBuilds) {
    def changeString = ""
    echo "Gathering SCM changes"
    for (int x = 0; x < passedBuilds.size(); x++) {
        def currentBuild = passedBuilds[x];
        def changeLogSets = currentBuild.rawBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                changeString += "* ${entry.msg} by ${entry.author} \n"
            }
        }
    }
    echo changeString
    return changeString;
}

@NonCPS
def getIssueList(){
    def list =[]
    def changes = getChangeString(passedBuilds)
    def re = /AB2-([0-9])*/
    def y = changes =~ re
    while (y){
        list.add(y.group().toString())
    }
    return list
}