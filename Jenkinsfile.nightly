#!/bin/env groovy
@Library('cliqz-shared-library@v1.2') _
def matrix = [
//     'Cliqz ARM':[
//         'arch': 'arm',
//         'brand': 'cliqz',
//         'channel': 'MA02',
//         'target': 'arm-linux-androideabi',
//     ],
//     'Cliqz X86':[
//         'arch': 'x86',
//         'brand': 'cliqz',
//         'channel': 'MA02',
//         'target': 'i686-linux-android',
//     ],
    'Ghostery ARM':[
        'arch': 'arm',
        'brand': 'ghostery',
        'channel': 'MA52',
        'target': 'arm-linux-androideabi',
    ],
    'Ghostery X86':[
        'arch': 'x86',
        'brand': 'ghostery',
        'channel': 'MA52',
        'target': 'i686-linux-android',
    ],
//     'Cliqz Alpha':[
//         'arch': 'arm',
//         'brand': 'cliqz-alpha',
//         'channel': 'MA02',
//         'target': 'arm-linux-androideabi',
//     ],
    'Ghostery Alpha':[
        'arch': 'arm',
        'brand': 'ghostery-alpha',
        'channel': 'MA52',
        'target': 'arm-linux-androideabi',
    ],
]
def baseImage
def codeImage
def id
node ('kria'){
    def dockerTag = "" 
    stage('Checkout') {
        checkout scm
        dockerTag = readFile('mozilla-release/browser/config/version_display.txt').trim()
    }
    id = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    baseImageName ="browser-f/android:${dockerTag}"
    codeImageName ="browser-f/android:nightlycode"
    baseImage = stage('Build base image') {
        docker.build(baseImageName, '--build-arg UID=`id -u` --build-arg GID=`id -g` -f Dockerfile .')
    }
    stage('Build code image') {
        writeFile file: 'Dockerfile.code', text: """
            FROM ${baseImageName}
            COPY --chown=jenkins:jenkins . /app/
        """

        codeImage = docker.build(
            codeImageName,
            '-f Dockerfile.code .',
        )
    }
}

def build(Map m){
    def flavorname = m.name
    def buildarch = m.arch
    def brandname = m.brand
    def cliqzchannel = m.channel
    def androidtarget = m.target
    def getImageName = m.getImageName
    def nodeLabel = 'kria'
    def getId = m.getId
    def apkPath = "/app/mozilla-release/objdir-frontend-android/${brandname}/gradle/build/mobile/android/app/outputs/apk/withGeckoBinaries/release"
    def apk = ""
    return {
        node(nodeLabel){
            getImageName().inside() {
                stage("Build APK: ${flavorname}") {
                    withEnv([
                        "ANDROID_TARGET=${androidtarget}",
                        "BRAND=${brandname}",
                        "CLIQZ_CHANNEL=${cliqzchannel}"
                    ]){
                        sh """#!/bin/bash -l
                            set -e
                            set -x
                            cd /app/mozilla-release
                            cp ../mozconfigs/deploy.mozconfig mozconfig
                            ./mach clobber
                            ./mach build
                            rm -f /app/mozilla-release/objdir-frontend-android/${brandname}/dist/bin/defaults/pref/mobile-l10n.js
                            cp /app/mozilla-release/mobile/android/installer/mobile-l10n.js /app/mozilla-release/objdir-frontend-android/${brandname}/dist/bin/defaults/pref/mobile-l10n.js
                            export MOZ_CHROME_MULTILOCALE=`ls -1 "../l10n/"|paste -s -d " "`
                            for AB_CD in \$MOZ_CHROME_MULTILOCALE; do
                                ./mach build chrome-\$AB_CD
                            done
                            export AB_CD=multi
                            ./mach package
                        """
                        withCredentials([
                            file(credentialsId: 'd746a1dd-e075-4844-869a-32116a496352', variable: 'CERT_PATH' ),
                            string(credentialsId: 'b7422020-fe1b-4c57-9230-f3d52afee3cf', variable: 'CERT_PASS')
                        ]) {
                            sh """#!/bin/bash -l
                                set -e
                                set -x
                                cd /app/mozilla-release
                                export MOZ_CHROME_MULTILOCALE=`ls -1 '../l10n/'|paste -s -d ' '`
                                export AB_CD=multi
                                ./gradlew :app:assembleWithGeckoBinariesRelease
                            """
                        }
                        apk = sh(returnStdout: true, script: """cd ${apkPath} && find *.apk -name '*-release*' -not -name '*-unsigned-*'""").trim()
                    }
                }
                stage("Upload: ${flavorname}") {
                    withCredentials([
                        [
                            $class: 'UsernamePasswordMultiBinding',
                            credentialsId: 'f1732e5f-3e84-47ad-9286-a5fa6657ec43',
                            passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                        ]
                    ]) {
                        def s3Path = "s3://repository.cliqz.com/dist/android/nightly/${brandname}"
                        def apkFullPath = "{apkPath}/${apk}"
                        def fileName = "${brandname}_Nightly-${env.BUILD_NUMBER}_${getId()}"
                        try {
                            zip archive: true, dir: "${apkPath}", glob: '', zipFile: "${flavorname}-build.zip"
                        } catch(e) {
                            print e
                        }
                        if (buildarch=="arm"){
                            sh """#!/bin/bash -l
                                set -e
                                set -x
                                aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkFullPath} ${s3Path}/${fileName}.apk
                                aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkFullPath} ${s3Path}/latest.apk
                            """
                        } else {
                            sh """#!/bin/bash -l
                                set -e
                                set -x
                                aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkFullPath} ${s3Path}/${fileName}_${buildarch}.apk
                                aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkFullPath} ${s3Path}/latest_${buildarch}.apk
                            """
                        }
                    }
                }
                stage('Clean Up') {
                   sh '''#!/bin/bash
                       rm -f /app/mozilla-release/mozconfig
                       rm -rf /app/mozilla-release/objdir-frontend-android
                   '''
                }
            }
        }
    }
}

def stepsForParallelBuilds = helpers.entries(matrix).collectEntries{
    [("Building ${it[0]}"):build(
            name: it[0],
            arch: it[1]['arch'],
            brand: it[1]['brand'],
            channel: it[1]['channel'],
            target: it[1]['target'],
            getImageName: {codeImage},
            getId: {id}
    )]
}

stage('Build Applications'){
    parallel stepsForParallelBuilds
}

def transitionIssueList
stage('JIRA'){
    withEnv(['JIRA_SITE=cliqztix']){
        passedBuilds = []
        lastSuccessfulBuild(passedBuilds,currentBuild)
        def issueIds = getIssueList()
        def transitionInput = [
                transition: [
                        id: '121'
                ]
        ]
        for (element in issueIds){
            try{
                def issue = jiraGetIssue idOrKey: element
                if(issue.data.fields.status.name == "Resolved"){
                    jiraTransitionIssue idOrKey: element, input: transitionInput
                    echo "Transistioned ${element}"
                } else{
                    echo """Element with id ${element} was not transitioned\nIts status is: """+issue.data.fields.status.name
                }
            }
            catch (Error e){
                echo e
            }
        }
        if (issueIds.size() > 0){
            transitionIssueList = issueIds.join(", ")
            echo transitionIssueList
        }
    }
}

stage('Send email') {
    def projectName  = '$PROJECT_NAME'
    def changesSinceLastSuccess = getChangeString(passedBuilds)
    def bodytxt = """
        ${projectName} - Build # ${env.BUILD_NUMBER}
        Check console output at ${env.JOB_URL}${env.BUILD_NUMBER}/ to view the results.
        Ghostery apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery/ghostery_Nightly-${env.BUILD_NUMBER}_${id}.apk
        Ghostery X86 apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery/ghostery_Nightly-${env.BUILD_NUMBER}_${id}_x86.apk
        Ghostery-Alpha apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery-alpha/ghostery-alpha_Nightly-${env.BUILD_NUMBER}_${id}.apk
        ${changesSinceLastSuccess}
        Issues Transtioned ${transitionIssueList}""".stripIndent()
    emailext(
        to: 'androiddev@cliqz.com',
        subject: '$PROJECT_NAME - Build # $BUILD_NUMBER',
        body: bodytxt
    )
}

def lastSuccessfulBuild(passedBuilds, build) {
    if ((build != null) && (build.result != 'SUCCESS')) {
        echo "Finding last succesful build"
        passedBuilds.add(build)
        echo "Found a build"
        lastSuccessfulBuild(passedBuilds, build.getPreviousBuild())
    }
}

@NonCPS
def getChangeString(passedBuilds) {
    def changeString = ""
    echo "Gathering Changes Since Last Successful Build"
    for (int x = 0; x < passedBuilds.size(); x++) {
        def currentBuild = passedBuilds[x];
        def buildNumber = currentBuild.number
        echo "Changes for Build ${buildNumber}"
        def changeLogSets = currentBuild.rawBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                changeString += "* ${entry.msg} \n"
            }
        }
    }
    if (!changeString) {
        changeString = " - No new changes"
    }
    echo changeString
    return changeString;
}

@NonCPS
def getIssueList(){
    def list = []
    def changes = getChangeString(passedBuilds)
    def re = /AB2-([0-9])*/
    def y = changes =~ re
    while (y){
        list.add(y.group().toString())
    }
    if (list.size() > 0) {
        echo 'Detected JIRA tickets'
        echo list.toString()
    } else {
       echo 'No JIRA tickets detected'
    }
    return list
}
