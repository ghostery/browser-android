#!/bin/env groovy

node('master') {
    
    def dockerTag = ""
    
    stage('Checkout') {
        checkout scm
        dockerTag = readFile('mozilla-release/browser/config/version_display.txt').trim()
    }
    def baseImageName = "browser-f/android:${dockerTag}"
    baseImage = stage('Build base image') {
        docker.build(baseImageName, '--build-arg UID=`id -u` --build-arg GID=`id -g` -f Dockerfile .')
    }
    baseImage.inside() {
        try {
            def apkPath = "mozilla-release/objdir-frontend-android/cliqz/gradle/build/mobile/android/app/outputs/apk/withGeckoBinaries/release"
            def apk = ""
            stage('Build and Signs APKS') {
                withEnv(['ANDROID_TARGET=i686-linux-android', 'BRAND=cliqz', 'CLIQZ_CHANNEL=MA00']) {
                    sh '''#!/bin/bash -l
                        set -e
                        set -x
                        cd mozilla-release
                        cp ../mozconfigs/deploy.mozconfig mozconfig
                        ./mach clobber
                        ./mach build
                        rm -f objdir-frontend-android/cliqz/dist/bin/defaults/pref/mobile-l10n.js
                        cp mobile/android/installer/mobile-l10n.js objdir-frontend-android/cliqz/dist/bin/defaults/pref/mobile-l10n.js
                        export MOZ_CHROME_MULTILOCALE=`ls -1 "../l10n/"|paste -s -d " "`
                        for AB_CD in $MOZ_CHROME_MULTILOCALE; do
                            ./mach build chrome-$AB_CD
                        done
                        export AB_CD=multi
                        ./mach package
                    '''
                    withCredentials([
                            file(credentialsId: 'd746a1dd-e075-4844-869a-32116a496352', variable: 'CERT_PATH' ),
                            string(credentialsId: 'b7422020-fe1b-4c57-9230-f3d52afee3cf', variable: 'CERT_PASS')
                    ]) {
                        sh """#!/bin/bash -l
                            set -e
                            set -x
                            cd mozilla-release
                            export MOZ_CHROME_MULTILOCALE=`ls -1 "../l10n/"|paste -s -d " "`
                            export AB_CD=multi
                            ./gradlew :app:assembleWithGeckoBinariesRelease
                        """
                    }
                    apk = sh(returnStdout: true, script: """cd ${apkPath} && find *.apk -name '*-release*' -not -name '*-unsigned-*'""").trim()
                    def apkFullPath = "${apkPath}/${apk}"
                    sh """#!/bin/bash -l
                        set -e
                        set -x
                        cp ${apkFullPath} mozilla-release/mobile/android/x86.apk
                    """
                }
                withEnv(['ANDROID_TARGET=arm-linux-androideabi', 'BRAND=cliqz', 'CLIQZ_CHANNEL=MA00']) {
                    sh '''#!/bin/bash -l
                        set -e
                        set -x
                        cd mozilla-release
                        cp ../mozconfigs/deploy.mozconfig mozconfig
                        ./mach clobber
                        ./mach build
                        rm -f objdir-frontend-android/cliqz/dist/bin/defaults/pref/mobile-l10n.js
                        cp mobile/android/installer/mobile-l10n.js objdir-frontend-android/cliqz/dist/bin/defaults/pref/mobile-l10n.js
                        export MOZ_CHROME_MULTILOCALE=`ls -1 "../l10n/"|paste -s -d " "`
                        for AB_CD in $MOZ_CHROME_MULTILOCALE; do
                            ./mach build chrome-$AB_CD
                        done
                        export AB_CD=multi
                        ./mach package
                    '''
                     withCredentials([
                            file(credentialsId: 'd746a1dd-e075-4844-869a-32116a496352', variable: 'CERT_PATH' ),
                            string(credentialsId: 'b7422020-fe1b-4c57-9230-f3d52afee3cf', variable: 'CERT_PASS')
                    ]) {
                        sh """#!/bin/bash -l
                            set -e
                            set -x
                            cd mozilla-release
                            export MOZ_CHROME_MULTILOCALE=`ls -1 "../l10n/"|paste -s -d " "`
                            export AB_CD=multi
                            ./gradlew :app:assembleWithGeckoBinariesRelease
                        """
                    }
                    apk = sh(returnStdout: true, script: """cd ${apkPath} && find *.apk -name '*-release*' -not -name '*-unsigned-*'""").trim()
                    def apkFullPath = "${apkPath}/${apk}"
                    sh """#!/bin/bash -l
                        set -e
                        set -x
                        cp ${apkFullPath} mozilla-release/mobile/android/arm.apk
                    """
                }
            }
            stage('Upload') {
                withCredentials([
                    file(credentialsId: 'd746a1dd-e075-4844-869a-32116a496352', variable: 'CERT_PATH'),
                    string(credentialsId: 'b7422020-fe1b-4c57-9230-f3d52afee3cf', variable: 'CERT_PASS'),
                    file(credentialsId: '2939d2e1-dd9a-4097-adc2-430e3d67157a', variable: 'PLAY_STORE_CERT')]) {
                    sh '''#!/bin/bash -l
                        set -e
                        set -x
                        cd mozilla-release/mobile/android
                        mv fastlane/Appfile.cliqz fastlane/Appfile
                        fastlane alpha
                    '''
                }
            }
        }
        finally {
            stage('Clean Up') {
                sh '''#!/bin/bash -l
                    rm -f mozilla-release/mozconfig
                    rm -rf mozilla-release/objdir-frontend-android
                    rm -f mozilla-release/mobile/android/*.apk
                '''
            }
        }
    }
}
