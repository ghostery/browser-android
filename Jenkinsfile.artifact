#!/bin/env groovy
@Library('cliqz-shared-library@v1.2') _

properties([
    parameters([
        booleanParam(name: 'REPLACE_TARGET', defaultValue: false, description: 'Replaces the existing target.apk from S3')
    ])
])

def matrix = [
        'x86':[
            'target':'i686-linux-android',
        ],
        'arm':[
            'target':'arm-linux-androideabi',
        ],
    ]

def build(Map m){
    def target = m.target
    def nodeLabel = 'us-east-1 && ubuntu && docker && !gpu'
    def arch = m.name

    return {
        node(nodeLabel) {
            def version = ((("https://raw.githubusercontent.com/cliqz-oss/cliqz-android/master/mozilla-release/browser/config/version.txt").toURL()).getText()).trim()
            def url = "https://repository.cliqz.com/dist/android/artifacts/${version}"
            def createTarget = false

            if (!params.REPLACE_TARGET) {
                try {
                    def targetAPK = sh(returnStdout: true,
                        script: """wget -S --spider '${url}/${arch}/cliqz-target.apk' 2>&1 | grep 'HTTP/1.1 200 OK'""").trim()[-2..-1]
                } catch(e) {
                    createTarget = true
                }
            }
            else {
                createTarget = true
            }
            if (createTarget) {
                def dockerTag = ""
                def apk = ""
                try {
                    stage('Checkout') {
                        checkout scm
                        dockerTag = readFile('mozilla-release/browser/config/version.txt').trim()
                    }
                    def baseImageName = "browser-f/android:${dockerTag}"
                    docker.withRegistry('https://141047255820.dkr.ecr.us-east-1.amazonaws.com') {
                        docker.image("${baseImageName}").inside {
                            stage('Build Artifacts') {
                                apk = cliqz.buildBrowser("${target}", "cliqz", "artifact")
                            }
                            stage('Upload to S3'){
                                sh "cp build/${apk} cliqz-target.apk"
                                archiveArtifacts allowEmptyArchive: true, artifacts: 'cliqz-target.apk'
                                withCredentials([
                                    [
                                        $class: 'AmazonWebServicesCredentialsBinding',
                                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                        credentialsId: 'd7e38c4a-37eb-490b-b4da-2f53cc14ab1b',
                                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                                    ]
                                ]) {
                                    def s3Path = "s3://repository.cliqz.com/dist/android/artifacts/${version}/${arch}"
                                    if (!params.REPLACE_TARGET) {
                                        utils.s3rm("${s3Path}/cliqz-target.apk")
                                    }
                                    utils.s3Copy(
                                        "build/${apk}",
                                        "${s3Path}",
                                        "cliqz-target",
                                        "",
                                        false
                                    )
                                }
                            }
                        }
                    }
                }
                finally {
                    stage('Clean Up') {
                        utils.cleanUp()
                        sh 'rm -f target.apk'
                    }
                }
            }
        }
    }
}
def stepsForParallelBuilds = helpers.entries(matrix).collectEntries{
    [("ARCH: ${it[0]}"):build(
        name: it[0],
        target: it[1]['target']
    )]
}

parallel stepsForParallelBuilds
