#!/bin/env groovy
@Library(['cliqz-shared-library@v1.2', 'browser-android@automation']) _

final CLIQZ = 'cliqz'
final CLIQZ_ALPHA = 'cliqz-alpha'
final GHOSTERY = 'ghostery'
final GHOSTERY_CANARY = 'ghostery-canary'
final CERT_FILE_ID = 'd746a1dd-e075-4844-869a-32116a496352'
final CERT_PASS_ID = 'b7422020-fe1b-4c57-9230-f3d52afee3cf'
final CLIQZ_APIFILE_ID = '2939d2e1-dd9a-4097-adc2-430e3d67157a'
final GHOSTERY_APIFILE_ID = '81d5a4c2-c504-4d18-a29f-18421bb04ddc'
final GHOSTERY_CANARY_APIFILE_ID = ''

properties([
    parameters([
        choice( name: 'BRAND',
                choices: [ CLIQZ, CLIQZ_ALPHA, GHOSTERY, GHOSTERY_CANARY ],
                description: 'Pick a brand to use' )
    ])
])

node('master') {

    def dockerTag = ""

    stage('Checkout') {
        checkout scm
        dockerTag = readFile('mozilla-release/browser/config/version.txt').trim()
    }
    def baseImageName = "browser-f/android:${dockerTag}"
    baseImage = stage('Build base image') {
        docker.build(baseImageName, '--build-arg USER=`whoami` --build-arg UID=`id -u` --build-arg GID=`id -g` -f Dockerfile .')
    }
    baseImage.inside() {
        try {
            def apk = ""
            final brand = params.BRAND
            stage('Build and Signs APKS') {
                cliqz.buildCliqzReactNative("cliqz")
                
                withCredentials([
                    file(credentialsId: CERT_FILE_ID, variable: 'CERT_PATH' ),
                    string(credentialsId: CERT_PASS_ID, variable: 'CERT_PASS')
                ]) {
                    apk = cliqz.buildBrowser("i686-linux-android", "${brand}", "release")
                    sh "cp build/${apk} mozilla-release/mobile/android/x86.apk"
                    apk = cliqz.buildBrowser("arm-linux-androideabi", "${brand}", "release")
                    sh "cp build/${apk} mozilla-release/mobile/android/arm.apk"
                }
            }
            stage('Upload') {
                def apiFile
                switch(brand) {
                    case CLIQZ:
                    case CLIQZ_ALPHA:
                        apiFile = CLIQZ_APIFILE_ID
                        break
                    case GHOSTERY:
                        apiFile = GHOSTERY_APIFILE_ID
                        break
                    case GHOSTERY_CANARY:
                        apiFile = GHOSTERY_CANARY_APIFILE_ID
                        break
                    default:
                        error("Invalid Brand")
                }
                archiveArtifacts allowEmptyArchive: true, artifacts: "build/*.apk"
                utils.fastlaneRelease(
                    brand,
                    CERT_FILE_ID,
                    CERT_PASS_ID,
                    apiFile
                )
            }
        }
        finally {
            stage('Clean Up') {
                utils.cleanUp()
                sh 'rm -rf mozilla-release/mobile/android/*.apk'
            }
        }
    }
}
